#!/bin/sh -
#
# Copyright (c) 2014, Quentin Schwerkolt
# All rights reserved.
#

: ${ARCH=`uname -p`}
: ${OPSYS=`uname -s`}
: ${OSREL=`uname -r | sed -e 's/[-(].*//'`}

: ${PKGBLDDIR="/usr/pkgbld"}
: ${COMMONDIR="${PKGBLDDIR}/common"}
: ${DISTDIR="${PKGBLDDIR}/distfiles"}
: ${REPODIR="${PKGBLDDIR}/repo"}

: ${PREFIX="/usr"}
: ${BINDIR="${PREFIX}/bin"}
: ${SBINDIR="${PREFIX}/sbin"}
: ${SYSCONFIGDIR="${PREFIX}/etc"}
: ${LIBDIR="${PREFIX}/lib"}
: ${LIBEXECDIR="${PREFIX}/libexec"}
: ${DATADIR="${PREFIX}/share"}
: ${DOCDIR="${DATADIR}/doc/${PKGNAME}"}
: ${MANDIR="${DATADIR}/man"}
: ${INFODIR="${DATADIR}/info"}
: ${TMPDIR="/tmp"}

: ${PKGSRC="${PKGNAME}-${PKGVERSION}"}

: ${WRKDIR="${PKGBLDDIR}/work/${PKGNAME}"}
: ${WRKSRC="${WRKDIR}/${PKGSRC}"}
: ${WRKBLD="${WRKSRC}"}
: ${WRKDST="${WRKDIR}/dest"}

: ${FILESDIR="$(pwd)/files"}
: ${PATCHDIR="$(pwd)/files"}

: ${PKGFILE="${PKGNAME}-${PKGEPOCH:-0}:${PKGVERSION}-${PKGREVISION:-0}.tgz"}

. ${COMMONDIR}/commands.subr

##################################################
### DOWNLOAD #####################################
##################################################

: ${FETCH="/usr/bin/fetch"}
: ${FETCH_ARGS="-Fpr"}

# __checksum() {
#     _algo=${ARCHIVE_HASH%:*}
#     _expected=${ARCHIVE_HASH#*:}
#     [ -z "$_algo" -o -z "$_expected" ] && return 0
#     _real=`$_algo -q $ARCHIVE`
#     [ "$_expected" != "$_real" ] && return 1
#     return 0
# }

# __download() {
#     _dcookie="${WRKDIR}/.__download_done"

#     [ -f "$_dcookie" ]		&& return 0
#     [ "$NO_DOWNLOAD" = "yes" ]	&& return 0
#     [ -d "$WRKDIR" ]		|| $MKDIR $WRKDIR
#     [ -d "$DISTDIR" ]		|| $MKDIR $DISTDIR

#     (
# 	cd $DISTDIR
# 	_tries=5
# 	([ -r $ARCHIVE ] && __checksum) && _status="ok"
# 	while [ $_tries -gt 0 -a -z "$_status" ]; do
# 	    ${FETCH} ${FETCH_ARGS} -o ${ARCHIVE} ${ARCHIVE_URL}/${ARCHIVE} || :
# 	    ([ -r $ARCHIVE ] && __checksum) && _status="ok"
# 	    _tries=$(($_tries - 1))
# 	done
# 	[ -z "$_status" ] && rm -f $ARCHIVE
#     )

#     $TOUCH $_dcookie
#     return 0
# }

__download() {
    _dcookie="${WRKDIR}/.__download_done"

    [ -d "$WRKDIR" ]	       || $MKDIR $WRKDIR
    [ -d "$DISTDIR" ]	       || $MKDIR $DISTDIR
    [ -f "$_dcookie" ]	       && return 0
    [ "$NO_DOWNLOAD" = "yes" ] && return 0

    if [ ! -w "$DISTDIR" ]; then
	echo "=> You cannot write into ${DISTDIR}; cannot download."
	__cleanup
	exit 1
    fi
    DISTFILES="$ARCHIVE $ARCHIVE_EXTRA $PATCHFILES $DISTFILES_EXTRA"
    _DISTDIR=`${REALPATH} ${DISTDIR}/${DISTSUBDIR}`
    [ -n "$_DISTDIR" -a ! -d "$_DISTDIR" ] && $MKDIR $_DISTDIR
    for file in $DISTFILES; do
	(
	    cd $_DISTDIR
	    ${FETCH} ${FETCH_ARGS} -o ${file} ${ARCHIVE_URL}/${file}
	)
	if [ $? -ne 0 ]; then
	    echo "=> Couldn't download $file"
	fi
    done

    $TOUCH $_dcookie
    return 0
}

##################################################
### CHECKSUM #####################################
##################################################

__checksum() {
    DISTFILES="$ARCHIVE $ARCHIVE_EXTRA $PATCHFILES $DISTFILES_EXTRA"
    _DISTDIR=`${REALPATH} ${DISTDIR}/${DISTSUBDIR}`
    [ -n "$_DISTDIR" -a ! -d "$_DISTDIR" ] && $MKDIR $_DISTDIR
    status=0
    for file in $DISTFILES; do
	eval tmp=\$${file}_HASH
	eval ALGEXE=${tmp%:*}
	ALGO=`echo ${tmp%:*} | tr [[:lower:]] [[:upper:]]`
	HASHEXP=${tmp#*:}
	if [ -z "$ALGO" -o -z "$ALGEXE" -o "$HASHEXP" ]; then
	    echo "=> No checksum for ${file}."
	    continue
	fi
	HASH=`cd $_DISTDIR && $ALGEXE -q $file`
	if [ "$HASH" != "$HASHEXP" ]; then
	    echo "=> ${ALGO} checksum mismatch for ${file}."
	    $RM $file
	    status=$(($status + 1))
	else
	    echo "=> ${ALGO} checksum ok for ${file}."
	fi
    done
    if [ $status -gt 0 ]; then
	echo "=> $status checksum mismatch."
	return 1
    fi
    return 0
}

##################################################
### EXTRACT ######################################
##################################################

__extract() {
    _dcookie="${WRKDIR}/.__extract_done"
    __download

    [ "$NO_EXTRACT" = "yes" ]	&& return 0
    [ -f "$_dcookie" ]		&& return 0
    [ -d "$WRKDIR" ]		|| $MKDIR $WRKDIR

    for archive in $ARCHIVE $ARCHIVE_EXTRA; do
	UNCOMPRESS=$CAT
	UNPACK="$TAR -xf - -C $WRKDIR"
	case "$archive" in
	    *.bz2|*.tbz|*.tbz2)	UNCOMPRESS="$BZIP2 -dc"	;;
	    *.gz|*.tgz)		UNCOMPRESS="$GZIP -dc"	;;
	    *.xz|*.txz)		UNCOMPRESS="$XZ -dc"	;;
	esac
	echo "===> Extracting ${archive}..."
	($UNCOMPRESS ${DISTDIR}/$archive | $UNPACK)
	if [ $? -ne 0 ]; then
	    __cleanup
	    exit 1
	fi
    done

    $TOUCH $_dcookie
    return 0
}

##################################################
### PREP #########################################
##################################################

: ${DISTORIG=".bak.orig"}
: ${PATCH_STRIP="-p0"}
: ${PATCH_ARGS="-d ${WRKSRC} --forward --quiet -E $PATCH_STRIP"}

__prep() {
    _dcookie="${WRKDIR}/.__prep_done"
    __download
    __extract

    [ -f "$_dcookie" ] && return 0
    if [ -n "$PATCHFILES" ]; then
	echo "===> Applying distribution patches for ${PKGNAME}..."
	for patch in $PATCHFILES; do
	    case $patch in
		*.gz)	$GZIP  -dc $patch ;;
		*.bz2)	$BZIP2 -dc $patch ;;
		*.xz)	$XZ    -dc $patch ;;
		*)	$CAT	   $patch ;;
	    esac | $PATCH $PATCH_ARGS
	    if [ $? -ne 0 ]; then
		echo -e 'Failed to apply patch ${patch}.'
		__cleanup
		exit 1
	    fi
	done
    fi

    if [ -d "$PATCHDIR" ]; then
	echo "===> Applying ${OPSYS} patches for ${PKGNAME}..."
	for patch in files/patch-*; do
	    case "$patch" in
		*.ignore|*.skip)
		    echo "===>  Ignoring patchfile $_patch"
		    ;;
		*)
		    echo "===>  Applying ${OPSYS} patchfile ${_patch}..."
		    $CAT $patch | $PATCH $PATCH_ARGS
		    if [ $? -ne 0 ]; then
			echo -e 'Failed to apply patch ${patch}.'
			__cleanup
			exit 1
		    fi
		    ;;
	    esac
	done
    fi
    (
	cd $WRKSRC
	prep
    )
    if [ $? -ne 0 ]; then
	__cleanup
	exit 1
    fi
    touch ${WRKDIR}/.__prep_done
    return 0
}

##################################################
### DEPENDS ######################################
##################################################

: ${BUILD_DEPENDS=""}
: ${RUNTIME_DEPENDS=""}

__depends() {
    _depends_type=$1
    case "$_depends_type" in
	'build')	_depends="$BUILD_DEPENDS"			;;
	'runtime')	_depends="$RUNTIME_DEPENDS"			;;
	'all')		_depends="$BUILD_DEPENDS $RUNTIME_DEPENDS"	;;
    esac
    for _depend in $_depends; do
	echo "=> ${PKGNAME} depends on ${_depends}..."
	(
	    _cookie=$(echo "/tmp/pkgbld/depends/${_depend}.done" | tr '/' '.')
	    mkdir -p `dirname $_cookie`
	    [ -f "$_cookie" ] && continue
	    cd ${PKGBLDDIR}/${_depend}
	    ./build package clean install DEPS=yes
	    touch $_cookie
	) || return 1
    done
    return 0
}

##################################################
### BUILD ########################################
##################################################

: ${CONFIGURE=""}
: ${CONFIGURE_SCRIPT="configure"}
: ${CONFIGURE_PREFIX="$PREFIX"}

configure() {
    if [ "$WRKSRC" = "$WRKBLD" ]; then
	CONFIGURE_SCRIPT="./$CONFIGURE_SCRIPT"
    else
	CONFIGURE_SCRIPT="${WRKSRC}/$CONFIGURE_SCRIPT"
    fi

    printf '#!/bin/sh -\n\n' > ${WRKDIR}/configure
    if [ -r "${WRKDIR}/configure.env" ]; then
	while read var; do
	    printf 'export %s\n' "$var" >> ${WRKDIR}/configure
	done < ${WRKDIR}/configure.env
	echo '' >> ${WRKDIR}/configure
    fi
    printf 'exec %s \\\n' $CONFIGURE_SCRIPT >> ${WRKDIR}/configure
    case "$CONFIGURE" in
	[Gg][Nn][Uu])
	    printf '\t--prefix=%s \\\n' "$CONFIGURE_PREFIX" >> ${WRKDIR}/configure
	    ;;
    esac
    while read arg; do
	printf '\t%s \\\n' "$arg" >> ${WRKDIR}/configure
    done < ${WRKDIR}/configure.args
    printf "\n" >> ${WRKDIR}/configure
    chmod +x ${WRKDIR}/configure

    rm -f ${WRKDIR}/configure.env
    rm -f ${WRKDIR}/configure.args

    ${WRKDIR}/configure
}

configure_env_add() {
    echo "$*" >> ${WRKDIR}/configure.env
}

configure_args_add() {
    echo "$*" >> ${WRKDIR}/configure.args
}

__build() {
    __prep || return 1
    [ -f "${WRKDIR}/.__build_done" ] && return 0
    [ -d "$WRKDIR" ] || mkdir -p $WRKDIR
    (
	cd $WRKBLD
	__depends build
	build
    ) || return 1
    touch ${WRKDIR}/.__build_done
    return 0
}

##################################################
### PACKAGE ######################################
##################################################

__package() {
    __build || return 1
    [ -f "${WRKDIR}/.__package_done" ] && return 0
    [ -d "$WRKDST" ] || mkdir -p $WRKDST
    (
	cd $WRKSRC
	package || return 1
    )
    # [ -d "${REPODIR}/All/${PKGNAME}" ] || mkdir -p ${REPODIR}/All/${PKGNAME}
    [ -d "$REPODIR" ] || mkdir -p $REPODIR
    [ -d "${WRKDST}/meta" ] || mkdir -p ${WRKDST}/meta
    (cd $WRKDST && find . | grep -v '^\./meta' | sort) > ${WRKDST}/meta/CONTENT
    echo "PKGNAME=$PKGNAME
PKGVERSION=$PKGVERSION
PKGREVISION=${PKGREVISION:-0}
PKGEPOCH=${PKGEPOCH:-0}

CATEGORIES=\"$CATEGORIES\"

DESCRIPTION=\"$DESCRIPTION\"" > ${WRKDST}/meta/MANIFEST
    tar -zcf ${REPODIR}/${PKGFILE} --options gzip:9 -C ${WRKDST} .
    touch ${WRKDIR}/.__package_done
    return 0
}

##################################################
### CLEAN ########################################
##################################################

: ${CLEANUP_FILE="${TMPDIR}/pkgbld_cleanup"}

__cleanup() {
    [ "$DEPS" = "yes" ] && return 0
    $CLEANUP_FILE
    $RM $CLEANUP_FILE
    return 0
}

__cleanup_init() {
    [ "$DEPS" = "yes" ] && return 0
    cat > $CLEANUP_FILE << "EOF"
#!/bin/sh -
#
# Automatically generated by pkgbld.
# DO NOT EDIT!!!
#

EOF
    chmod +x $CLEANUP_FILE
    printf 'rm -rf %s/pkgbld' $TMPDIR >> $CLEANUP_FILE
    return 0
}

__clean() {
    rm -rf $WRKDIR
}

##################################################
### INSTALL ######################################
##################################################

__install() {
    __package || return 1
    [ -r "${REPODIR}/${PKGFILE}" ] || return 1
    (
	__depends runtime
    ) || return 1
    tar -xf ${REPODIR}/${PKGFILE} -C /
    [ -d "/var/pkg" ] || mkdir -p /var/pkg
    mv /meta /var/pkg/$PKGNAME
    return 0
}

##################################################
### MAIN #########################################
##################################################

main() {
    for i in $*; do
	case "$1" in
	    'build'|'clean'|'download'|'extract'|'install'|'package'|'prep')
		_func="$_func $1"
		;;
	    *=*)
		eval "$i"
		;;
	esac
	shift
    done
    __cleanup_init
    for func in $_func; do
	__$func
    done
    __cleanup
    return 0
}

set -e
